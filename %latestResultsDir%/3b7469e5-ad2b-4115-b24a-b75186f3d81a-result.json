{"name": "test_case_01", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=126.0.6478.57)\nStacktrace:\n\tGetHandleVerifier [0x00007FF71B873E52+31618]\n\t(No symbol) [0x00007FF71B7EB0B9]\n\t(No symbol) [0x00007FF71B6A888A]\n\t(No symbol) [0x00007FF71B6F7AC3]\n\t(No symbol) [0x00007FF71B6F862C]\n\t(No symbol) [0x00007FF71B73F787]\n\t(No symbol) [0x00007FF71B71D14F]\n\t(No symbol) [0x00007FF71B73CA80]\n\t(No symbol) [0x00007FF71B71CEB3]\n\t(No symbol) [0x00007FF71B6EA46B]\n\t(No symbol) [0x00007FF71B6EB001]\n\tGetHandleVerifier [0x00007FF71BB7A02D+3202397]\n\tGetHandleVerifier [0x00007FF71BBC6A4D+3516285]\n\tGetHandleVerifier [0x00007FF71BBBC4C0+3473904]\n\tGetHandleVerifier [0x00007FF71B925D56+760454]\n\t(No symbol) [0x00007FF71B7F6B5F]\n\t(No symbol) [0x00007FF71B7F1CF4]\n\t(No symbol) [0x00007FF71B7F1E82]\n\t(No symbol) [0x00007FF71B7E122F]\n\tBaseThreadInitThunk [0x00007FFDA8DF7344+20]\n\tRtlUserThreadStart [0x00007FFDA91DCC91+33]", "trace": "request = <SubRequest 'setup_teardown' for <Function test_case_01>>\n\n    @pytest.fixture(scope=\"function\")\n    def setup_teardown(request):\n    \n        options = webdriver.ChromeOptions()\n        options.use_chromium = True\n    \n        options.add_experimental_option(\"prefs\",{\"download.default.directory\":DOWNLOAD_DIR})\n        options.add_argument(\"download.prompt_for_download=false\")\n    \n        driver = webdriver.Chrome(options=options)\n    \n        # Set implicit wait\n        driver.implicitly_wait(40)\n    \n        driver.get(site_url)\n        driver.maximize_window()\n        request.cls.driver = driver\n    \n        login_page = LoginPage(driver)\n        home_page = Homepage(driver)\n    \n        wait = WebDriverWait(driver, 30)\n    \n        decoded_username = decode(username)\n        decoded_password = decode(password)\n        pdb.set_trace()\n        wait.until(expected_conditions.visibility_of_element_located(login_page.username_input_field))\n>       driver.find_element(login_page.username_input_field).click()\n\nsrc\\conftest.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021BE3BA90D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...07FF71B7E122F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDA8DF7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDA91DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=126.0.6478.57)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF71B873E52+31618]\nE       \t(No symbol) [0x00007FF71B7EB0B9]\nE       \t(No symbol) [0x00007FF71B6A888A]\nE       \t(No symbol) [0x00007FF71B6F7AC3]\nE       \t(No symbol) [0x00007FF71B6F862C]\nE       \t(No symbol) [0x00007FF71B73F787]\nE       \t(No symbol) [0x00007FF71B71D14F]\nE       \t(No symbol) [0x00007FF71B73CA80]\nE       \t(No symbol) [0x00007FF71B71CEB3]\nE       \t(No symbol) [0x00007FF71B6EA46B]\nE       \t(No symbol) [0x00007FF71B6EB001]\nE       \tGetHandleVerifier [0x00007FF71BB7A02D+3202397]\nE       \tGetHandleVerifier [0x00007FF71BBC6A4D+3516285]\nE       \tGetHandleVerifier [0x00007FF71BBBC4C0+3473904]\nE       \tGetHandleVerifier [0x00007FF71B925D56+760454]\nE       \t(No symbol) [0x00007FF71B7F6B5F]\nE       \t(No symbol) [0x00007FF71B7F1CF4]\nE       \t(No symbol) [0x00007FF71B7F1E82]\nE       \t(No symbol) [0x00007FF71B7E122F]\nE       \tBaseThreadInitThunk [0x00007FFDA8DF7344+20]\nE       \tRtlUserThreadStart [0x00007FFDA91DCC91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1718433142366, "stop": 1718433142366, "uuid": "94d99dbb-909a-4521-b0e8-ae5a8a693ced", "historyId": "da8a131242ee5a40dd67ae6ebe4a3496", "testCaseId": "da8a131242ee5a40dd67ae6ebe4a3496", "fullName": "src.tests.smoke.test_case_01.Test_case_01#test_case_01", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_teardown')"}, {"name": "parentSuite", "value": "src.tests.smoke"}, {"name": "suite", "value": "test_case_01"}, {"name": "subSuite", "value": "Test_case_01"}, {"name": "host", "value": "DESKTOP-K272ERD"}, {"name": "thread", "value": "17056-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.smoke.test_case_01"}]}